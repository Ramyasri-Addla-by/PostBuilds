name: Updating IntactixImageServer.config file.
on:
  push:
    #paths: 
    #- 'workloads/imageserver/IntactixImageServer.config'
    #types: [closed]

jobs:
   build:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIAL }}

      - name: "Get Secrets From Azure Key Vault"
        uses: Azure/get-keyvault-secrets@v1.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          keyvault: "kv136"
          secrets: 'azure-infra-resource-group-name, azure-infra-storage-acct-name, access-key, azure-vmss-name'
        id: myGetSecretAction
      - name: Deleting IntactixImageServer.config File From the Azure File Storage.
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
           az storage file delete --account-name ${{ steps.myGetSecretAction.outputs.azure-infra-storage-acct-name }} --account-key ${{ steps.myGetSecretAction.outputs.access-key }} --share-name imageserver --path IntactixImageServer.config 
  
      - name: Uploading IntactixImageServer.config File to the Azure File Storage.
        uses: azure/CLI@v1   
        with:
          azcliversion: 2.30.0
          inlineScript: |
            chmod +x $GITHUB_WORKSPACE
            az storage file upload --account-name ${{ steps.myGetSecretAction.outputs.azure-infra-storage-acct-name }} --account-key ${{ steps.myGetSecretAction.outputs.access-key }} --share-name imageserver --path IntactixImageServer.config --source $GITHUB_WORKSPACE/workloads/imageserver/IntactixImageServer.config
      - name: Pause for 1 minute
        run: |
          sleep 60s
      - name: Query the VM Scale Set Instance id and Invoke the Command.
        shell: pwsh
        run: |
          az vm show --name Vm1 --resource-group rg1
        
          az vm run-command invoke\
          --resource-group 'rg1'\
          --name 'Vm1' \
          --command-id 'RunPowerShellScript' \
          --scripts @workloads\ImageserverPwrscrpt\Powershell.ps1
         # $vmssinstanceId=az vmss list-instances -g ${{ steps.myGetSecretAction.outputs.azure-infra-resource-group-name }} -n ${{ steps.myGetSecretAction.outputs.azure-vmss-name }} --query "[].[instanceId]" -o tsv
         # az vmss run-command invoke --command-id RunPowerShellScript -n ${{ steps.myGetSecretAction.outputs.azure-vmss-name }} -g ${{ steps.myGetSecretAction.outputs.azure-infra-resource-group-name }} --scripts "@workloads\ImageserverPwrscrpt\Powershell.ps1" --instance-id $vmssinstanceId[0]
